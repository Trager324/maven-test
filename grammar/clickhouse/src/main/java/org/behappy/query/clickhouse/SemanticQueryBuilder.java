/*
 * SPDX-License-Identifier: LGPL-2.1-or-later
 * Copyright Red Hat Inc. and Hibernate Authors
 */
package org.behappy.query.clickhouse;

import lombok.extern.slf4j.Slf4j;
import org.behappy.grammar.clickhouse.ClickHouseParser;
import org.behappy.grammar.clickhouse.ClickHouseParserBaseVisitor;
import org.hibernate.internal.util.collections.Stack;
import org.hibernate.internal.util.collections.StandardStack;
import org.hibernate.metamodel.model.domain.BasicDomainType;
import org.hibernate.query.criteria.JpaCteCriteria;
import org.hibernate.query.hql.internal.BasicDotIdentifierConsumer;
import org.hibernate.query.hql.spi.DotIdentifierConsumer;
import org.hibernate.query.hql.spi.SqmCreationOptions;
import org.hibernate.query.hql.spi.SqmCreationProcessingState;
import org.hibernate.query.hql.spi.SqmCreationState;
import org.hibernate.query.sqm.internal.ParameterCollector;
import org.hibernate.query.sqm.spi.ParameterDeclarationContext;
import org.hibernate.query.sqm.spi.SqmCreationContext;
import org.hibernate.query.sqm.tree.cte.SqmCteStatement;
import org.hibernate.query.sqm.tree.expression.AbstractSqmParameter;
import org.hibernate.type.descriptor.java.JavaType;
import org.hibernate.type.descriptor.java.spi.JavaTypeRegistry;
import org.hibernate.type.descriptor.java.spi.UnknownBasicJavaType;
import org.hibernate.type.descriptor.jdbc.ObjectJdbcType;
import org.hibernate.type.internal.BasicTypeImpl;
import org.hibernate.type.spi.TypeConfiguration;

import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * Responsible for producing an SQM using visitation over an HQL parse tree generated by
 * ANTLR via {@link ClickHouseParser}.
 *
 * @author Steve Ebersole
 */
@Slf4j
public class SemanticQueryBuilder<R> extends ClickHouseParserBaseVisitor<Object> implements SqmCreationState {

    private static final Set<String> JPA_STANDARD_FUNCTIONS = Set.of(
            "avg",
            "max",
            "min",
            "sum",
            "count",
            "length",
            "locate",
            "abs",
            "sqrt",
            "mod",
            "size",
            "index",
            "current_date",
            "current_time",
            "current_timestamp",
            "concat",
            "substring",
            "trim",
            "lower",
            "upper",
            "coalesce",
            "nullif",
            "left",
            "right",
            "replace"
    );

    private static final BasicTypeImpl<Object> OBJECT_BASIC_TYPE =
            new BasicTypeImpl<>(new UnknownBasicJavaType<>(Object.class), ObjectJdbcType.INSTANCE);

//	/**
//	 * Main entry point into analysis of HQL/JPQL parse tree - producing
//	 * a semantic model of the query.
//	 */
//	public static <R> SqmStatement<R> buildSemanticModel(
//			ClickHouseParser.RootContext parseTree,
//			Class<R> expectedResultType,
//			SqmCreationOptions creationOptions,
//			SqmCreationContext creationContext,
//			String query) {
//		return new SemanticQueryBuilder<>( expectedResultType, creationOptions, creationContext, query )
//				.visitStatement( parseTree );
//	}

    private final Class<R> expectedResultType;
    private final String expectedResultTypeName;
    private final String expectedResultTypeShortName;
    private final String expectedResultEntity;
    private final SqmCreationOptions creationOptions;
    private final SqmCreationContext creationContext;
    private final String query;

    private final Stack<DotIdentifierConsumer> dotIdentifierConsumerStack;

    private final Stack<ParameterDeclarationContext> parameterDeclarationContextStack = new StandardStack<>(ParameterDeclarationContext.class);
    private final Stack<SqmCreationProcessingState> processingStateStack = new StandardStack<>(SqmCreationProcessingState.class);

    private final BasicDomainType<Integer> integerDomainType;
    private final JavaType<List<?>> listJavaType;
    private final JavaType<Map<?, ?>> mapJavaType;

    private ParameterCollector parameterCollector;
//    private ParameterStyle parameterStyle;
    private Map<Object, AbstractSqmParameter<?>> parameters;

    private boolean isExtractingJdbcTemporalType;
    // Provides access to the current CTE that is being processed, which is potentially recursive
    // This is necessary, so that the recursive query part of a CTE can access its own structure.
    // Note that the structure is based on the non-recursive query part, so there is no cycle
    private JpaCteCriteria<?> currentPotentialRecursiveCte;

    public SemanticQueryBuilder(
            Class<R> expectedResultType,
            SqmCreationOptions creationOptions,
            SqmCreationContext creationContext,
            String query) {
        this(expectedResultType,
                expectedResultType == null ? null : expectedResultType.getTypeName(),
                expectedResultType == null ? null : expectedResultType.getSimpleName(),
                null, creationOptions, creationContext, query);
    }

    public SemanticQueryBuilder(
            String expectedResultTypeName,
            String expectedResultTypeShortName,
            String expectedResultEntity,
            SqmCreationOptions creationOptions,
            SqmCreationContext creationContext,
            String query) {
        this(null,
                expectedResultTypeName,
                expectedResultTypeShortName,
                expectedResultEntity,
                creationOptions, creationContext,
                query);
    }

    public SemanticQueryBuilder(
            String expectedResultTypeName,
            String expectedResultTypeShortName,
            Class<R> expectedResultType,
            SqmCreationOptions creationOptions,
            SqmCreationContext creationContext,
            String query) {
        this(expectedResultType,
                expectedResultTypeName,
                expectedResultTypeShortName,
                null,
                creationOptions, creationContext,
                query);
    }

    private SemanticQueryBuilder(
            Class<R> expectedResultType,
            String expectedResultTypeName,
            String expectedResultTypeShortName,
            String expectedResultEntity,
            SqmCreationOptions creationOptions,
            SqmCreationContext creationContext,
            String query) {
        this.expectedResultType = expectedResultType;
        this.expectedResultTypeName = expectedResultTypeName;
        this.expectedResultTypeShortName = expectedResultTypeShortName;
        this.expectedResultEntity = expectedResultEntity;
        this.creationOptions = creationOptions;
        this.creationContext = creationContext;
        this.query = query;
        this.dotIdentifierConsumerStack = new StandardStack<>(
                DotIdentifierConsumer.class,
                new BasicDotIdentifierConsumer(this)
        );
//        this.parameterStyle = creationOptions.useStrictJpaCompliance()
//                ? ParameterStyle.UNKNOWN
//                : ParameterStyle.MIXED;

        final TypeConfiguration typeConfiguration = creationContext.getTypeConfiguration();
        final JavaTypeRegistry javaTypeRegistry = typeConfiguration.getJavaTypeRegistry();
        this.integerDomainType = typeConfiguration.standardBasicTypeForJavaType(Integer.class);
        this.listJavaType = javaTypeRegistry.resolveDescriptor(List.class);
        this.mapJavaType = javaTypeRegistry.resolveDescriptor(Map.class);
    }

    @Override
    public SqmCreationContext getCreationContext() {
        return creationContext;
    }

    @Override
    public SqmCreationOptions getCreationOptions() {
        return creationOptions;
    }

    public Stack<SqmCreationProcessingState> getProcessingStateStack() {
        return processingStateStack;
    }

    @Override
    public SqmCteStatement<?> findCteStatement(String name) {
        return null;
    }

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Grammar rules


    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Top-level statements


    @Override
    public Object visitRoot(ClickHouseParser.RootContext ctx) {
        return super.visitRoot(ctx);
    }

    @Override
    public Object visitQueryMulti(ClickHouseParser.QueryMultiContext ctx) {
        return super.visitQueryMulti(ctx);
    }

    @Override
    public Object visitQueryStmt(ClickHouseParser.QueryStmtContext ctx) {
        return super.visitQueryStmt(ctx);
    }

    @Override
    public Object visitQuery(ClickHouseParser.QueryContext ctx) {
        return super.visitQuery(ctx);
    }

    @Override
    public Object visitCtes(ClickHouseParser.CtesContext ctx) {
        return super.visitCtes(ctx);
    }

    @Override
    public Object visitNamedQuery(ClickHouseParser.NamedQueryContext ctx) {
        return super.visitNamedQuery(ctx);
    }

    @Override
    public Object visitColumnAliases(ClickHouseParser.ColumnAliasesContext ctx) {
        return super.visitColumnAliases(ctx);
    }

    @Override
    public Object visitAlterTableStmt(ClickHouseParser.AlterTableStmtContext ctx) {
        return super.visitAlterTableStmt(ctx);
    }

    @Override
    public Object visitAlterTableClauseAddColumn(ClickHouseParser.AlterTableClauseAddColumnContext ctx) {
        return super.visitAlterTableClauseAddColumn(ctx);
    }

    @Override
    public Object visitAlterTableClauseAddIndex(ClickHouseParser.AlterTableClauseAddIndexContext ctx) {
        return super.visitAlterTableClauseAddIndex(ctx);
    }

    @Override
    public Object visitAlterTableClauseAddProjection(ClickHouseParser.AlterTableClauseAddProjectionContext ctx) {
        return super.visitAlterTableClauseAddProjection(ctx);
    }

    @Override
    public Object visitAlterTableClauseAttach(ClickHouseParser.AlterTableClauseAttachContext ctx) {
        return super.visitAlterTableClauseAttach(ctx);
    }

    @Override
    public Object visitAlterTableClauseClearColumn(ClickHouseParser.AlterTableClauseClearColumnContext ctx) {
        return super.visitAlterTableClauseClearColumn(ctx);
    }

    @Override
    public Object visitAlterTableClauseClearIndex(ClickHouseParser.AlterTableClauseClearIndexContext ctx) {
        return super.visitAlterTableClauseClearIndex(ctx);
    }

    @Override
    public Object visitAlterTableClauseClearProjection(ClickHouseParser.AlterTableClauseClearProjectionContext ctx) {
        return super.visitAlterTableClauseClearProjection(ctx);
    }

    @Override
    public Object visitAlterTableClauseComment(ClickHouseParser.AlterTableClauseCommentContext ctx) {
        return super.visitAlterTableClauseComment(ctx);
    }

    @Override
    public Object visitAlterTableClauseDelete(ClickHouseParser.AlterTableClauseDeleteContext ctx) {
        return super.visitAlterTableClauseDelete(ctx);
    }

    @Override
    public Object visitAlterTableClauseDetach(ClickHouseParser.AlterTableClauseDetachContext ctx) {
        return super.visitAlterTableClauseDetach(ctx);
    }

    @Override
    public Object visitAlterTableClauseDropColumn(ClickHouseParser.AlterTableClauseDropColumnContext ctx) {
        return super.visitAlterTableClauseDropColumn(ctx);
    }

    @Override
    public Object visitAlterTableClauseDropIndex(ClickHouseParser.AlterTableClauseDropIndexContext ctx) {
        return super.visitAlterTableClauseDropIndex(ctx);
    }

    @Override
    public Object visitAlterTableClauseDropProjection(ClickHouseParser.AlterTableClauseDropProjectionContext ctx) {
        return super.visitAlterTableClauseDropProjection(ctx);
    }

    @Override
    public Object visitAlterTableClauseDropPartition(ClickHouseParser.AlterTableClauseDropPartitionContext ctx) {
        return super.visitAlterTableClauseDropPartition(ctx);
    }

    @Override
    public Object visitAlterTableClauseFreezePartition(ClickHouseParser.AlterTableClauseFreezePartitionContext ctx) {
        return super.visitAlterTableClauseFreezePartition(ctx);
    }

    @Override
    public Object visitAlterTableClauseMaterializeIndex(ClickHouseParser.AlterTableClauseMaterializeIndexContext ctx) {
        return super.visitAlterTableClauseMaterializeIndex(ctx);
    }

    @Override
    public Object visitAlterTableClauseMaterializeProjection(ClickHouseParser.AlterTableClauseMaterializeProjectionContext ctx) {
        return super.visitAlterTableClauseMaterializeProjection(ctx);
    }

    @Override
    public Object visitAlterTableClauseModifyCodec(ClickHouseParser.AlterTableClauseModifyCodecContext ctx) {
        return super.visitAlterTableClauseModifyCodec(ctx);
    }

    @Override
    public Object visitAlterTableClauseModifyComment(ClickHouseParser.AlterTableClauseModifyCommentContext ctx) {
        return super.visitAlterTableClauseModifyComment(ctx);
    }

    @Override
    public Object visitAlterTableClauseModifyRemove(ClickHouseParser.AlterTableClauseModifyRemoveContext ctx) {
        return super.visitAlterTableClauseModifyRemove(ctx);
    }

    @Override
    public Object visitAlterTableClauseModify(ClickHouseParser.AlterTableClauseModifyContext ctx) {
        return super.visitAlterTableClauseModify(ctx);
    }

    @Override
    public Object visitAlterTableClauseModifyOrderBy(ClickHouseParser.AlterTableClauseModifyOrderByContext ctx) {
        return super.visitAlterTableClauseModifyOrderBy(ctx);
    }

    @Override
    public Object visitAlterTableClauseModifyTTL(ClickHouseParser.AlterTableClauseModifyTTLContext ctx) {
        return super.visitAlterTableClauseModifyTTL(ctx);
    }

    @Override
    public Object visitAlterTableClauseMovePartition(ClickHouseParser.AlterTableClauseMovePartitionContext ctx) {
        return super.visitAlterTableClauseMovePartition(ctx);
    }

    @Override
    public Object visitAlterTableClauseRemoveTTL(ClickHouseParser.AlterTableClauseRemoveTTLContext ctx) {
        return super.visitAlterTableClauseRemoveTTL(ctx);
    }

    @Override
    public Object visitAlterTableClauseRename(ClickHouseParser.AlterTableClauseRenameContext ctx) {
        return super.visitAlterTableClauseRename(ctx);
    }

    @Override
    public Object visitAlterTableClauseReplace(ClickHouseParser.AlterTableClauseReplaceContext ctx) {
        return super.visitAlterTableClauseReplace(ctx);
    }

    @Override
    public Object visitAlterTableClauseUpdate(ClickHouseParser.AlterTableClauseUpdateContext ctx) {
        return super.visitAlterTableClauseUpdate(ctx);
    }

    @Override
    public Object visitAssignmentExprList(ClickHouseParser.AssignmentExprListContext ctx) {
        return super.visitAssignmentExprList(ctx);
    }

    @Override
    public Object visitAssignmentExpr(ClickHouseParser.AssignmentExprContext ctx) {
        return super.visitAssignmentExpr(ctx);
    }

    @Override
    public Object visitTableColumnPropertyType(ClickHouseParser.TableColumnPropertyTypeContext ctx) {
        return super.visitTableColumnPropertyType(ctx);
    }

    @Override
    public Object visitPartitionClause(ClickHouseParser.PartitionClauseContext ctx) {
        return super.visitPartitionClause(ctx);
    }

    @Override
    public Object visitAttachDictionaryStmt(ClickHouseParser.AttachDictionaryStmtContext ctx) {
        return super.visitAttachDictionaryStmt(ctx);
    }

    @Override
    public Object visitCheckStmt(ClickHouseParser.CheckStmtContext ctx) {
        return super.visitCheckStmt(ctx);
    }

    @Override
    public Object visitCreateDatabaseStmt(ClickHouseParser.CreateDatabaseStmtContext ctx) {
        return super.visitCreateDatabaseStmt(ctx);
    }

    @Override
    public Object visitCreateDictionaryStmt(ClickHouseParser.CreateDictionaryStmtContext ctx) {
        return super.visitCreateDictionaryStmt(ctx);
    }

    @Override
    public Object visitCreateLiveViewStmt(ClickHouseParser.CreateLiveViewStmtContext ctx) {
        return super.visitCreateLiveViewStmt(ctx);
    }

    @Override
    public Object visitCreateMaterializedViewStmt(ClickHouseParser.CreateMaterializedViewStmtContext ctx) {
        return super.visitCreateMaterializedViewStmt(ctx);
    }

    @Override
    public Object visitCreateTableStmt(ClickHouseParser.CreateTableStmtContext ctx) {
        return super.visitCreateTableStmt(ctx);
    }

    @Override
    public Object visitCreateViewStmt(ClickHouseParser.CreateViewStmtContext ctx) {
        return super.visitCreateViewStmt(ctx);
    }

    @Override
    public Object visitDictionarySchemaClause(ClickHouseParser.DictionarySchemaClauseContext ctx) {
        return super.visitDictionarySchemaClause(ctx);
    }

    @Override
    public Object visitDictionaryAttrDfnt(ClickHouseParser.DictionaryAttrDfntContext ctx) {
        return super.visitDictionaryAttrDfnt(ctx);
    }

    @Override
    public Object visitDictionaryEngineClause(ClickHouseParser.DictionaryEngineClauseContext ctx) {
        return super.visitDictionaryEngineClause(ctx);
    }

    @Override
    public Object visitDictionaryPrimaryKeyClause(ClickHouseParser.DictionaryPrimaryKeyClauseContext ctx) {
        return super.visitDictionaryPrimaryKeyClause(ctx);
    }

    @Override
    public Object visitDictionaryArgExpr(ClickHouseParser.DictionaryArgExprContext ctx) {
        return super.visitDictionaryArgExpr(ctx);
    }

    @Override
    public Object visitSourceClause(ClickHouseParser.SourceClauseContext ctx) {
        return super.visitSourceClause(ctx);
    }

    @Override
    public Object visitLifetimeClause(ClickHouseParser.LifetimeClauseContext ctx) {
        return super.visitLifetimeClause(ctx);
    }

    @Override
    public Object visitLayoutClause(ClickHouseParser.LayoutClauseContext ctx) {
        return super.visitLayoutClause(ctx);
    }

    @Override
    public Object visitRangeClause(ClickHouseParser.RangeClauseContext ctx) {
        return super.visitRangeClause(ctx);
    }

    @Override
    public Object visitDictionarySettingsClause(ClickHouseParser.DictionarySettingsClauseContext ctx) {
        return super.visitDictionarySettingsClause(ctx);
    }

    @Override
    public Object visitClusterClause(ClickHouseParser.ClusterClauseContext ctx) {
        return super.visitClusterClause(ctx);
    }

    @Override
    public Object visitUuidClause(ClickHouseParser.UuidClauseContext ctx) {
        return super.visitUuidClause(ctx);
    }

    @Override
    public Object visitDestinationClause(ClickHouseParser.DestinationClauseContext ctx) {
        return super.visitDestinationClause(ctx);
    }

    @Override
    public Object visitSubqueryClause(ClickHouseParser.SubqueryClauseContext ctx) {
        return super.visitSubqueryClause(ctx);
    }

    @Override
    public Object visitSchemaDescriptionClause(ClickHouseParser.SchemaDescriptionClauseContext ctx) {
        return super.visitSchemaDescriptionClause(ctx);
    }

    @Override
    public Object visitSchemaAsTableClause(ClickHouseParser.SchemaAsTableClauseContext ctx) {
        return super.visitSchemaAsTableClause(ctx);
    }

    @Override
    public Object visitSchemaAsFunctionClause(ClickHouseParser.SchemaAsFunctionClauseContext ctx) {
        return super.visitSchemaAsFunctionClause(ctx);
    }

    @Override
    public Object visitEngineClause(ClickHouseParser.EngineClauseContext ctx) {
        return super.visitEngineClause(ctx);
    }

    @Override
    public Object visitPartitionByClause(ClickHouseParser.PartitionByClauseContext ctx) {
        return super.visitPartitionByClause(ctx);
    }

    @Override
    public Object visitPrimaryKeyClause(ClickHouseParser.PrimaryKeyClauseContext ctx) {
        return super.visitPrimaryKeyClause(ctx);
    }

    @Override
    public Object visitSampleByClause(ClickHouseParser.SampleByClauseContext ctx) {
        return super.visitSampleByClause(ctx);
    }

    @Override
    public Object visitTtlClause(ClickHouseParser.TtlClauseContext ctx) {
        return super.visitTtlClause(ctx);
    }

    @Override
    public Object visitEngineExpr(ClickHouseParser.EngineExprContext ctx) {
        return super.visitEngineExpr(ctx);
    }

    @Override
    public Object visitTableElementExprColumn(ClickHouseParser.TableElementExprColumnContext ctx) {
        return super.visitTableElementExprColumn(ctx);
    }

    @Override
    public Object visitTableElementExprConstraint(ClickHouseParser.TableElementExprConstraintContext ctx) {
        return super.visitTableElementExprConstraint(ctx);
    }

    @Override
    public Object visitTableElementExprIndex(ClickHouseParser.TableElementExprIndexContext ctx) {
        return super.visitTableElementExprIndex(ctx);
    }

    @Override
    public Object visitTableElementExprProjection(ClickHouseParser.TableElementExprProjectionContext ctx) {
        return super.visitTableElementExprProjection(ctx);
    }

    @Override
    public Object visitTableColumnDfnt(ClickHouseParser.TableColumnDfntContext ctx) {
        return super.visitTableColumnDfnt(ctx);
    }

    @Override
    public Object visitTableColumnPropertyExpr(ClickHouseParser.TableColumnPropertyExprContext ctx) {
        return super.visitTableColumnPropertyExpr(ctx);
    }

    @Override
    public Object visitTableIndexDfnt(ClickHouseParser.TableIndexDfntContext ctx) {
        return super.visitTableIndexDfnt(ctx);
    }

    @Override
    public Object visitTableProjectionDfnt(ClickHouseParser.TableProjectionDfntContext ctx) {
        return super.visitTableProjectionDfnt(ctx);
    }

    @Override
    public Object visitCodecExpr(ClickHouseParser.CodecExprContext ctx) {
        return super.visitCodecExpr(ctx);
    }

    @Override
    public Object visitCodecArgExpr(ClickHouseParser.CodecArgExprContext ctx) {
        return super.visitCodecArgExpr(ctx);
    }

    @Override
    public Object visitTtlExpr(ClickHouseParser.TtlExprContext ctx) {
        return super.visitTtlExpr(ctx);
    }

    @Override
    public Object visitDescribeStmt(ClickHouseParser.DescribeStmtContext ctx) {
        return super.visitDescribeStmt(ctx);
    }

    @Override
    public Object visitDropDatabaseStmt(ClickHouseParser.DropDatabaseStmtContext ctx) {
        return super.visitDropDatabaseStmt(ctx);
    }

    @Override
    public Object visitDropTableStmt(ClickHouseParser.DropTableStmtContext ctx) {
        return super.visitDropTableStmt(ctx);
    }

    @Override
    public Object visitExistsDatabaseStmt(ClickHouseParser.ExistsDatabaseStmtContext ctx) {
        return super.visitExistsDatabaseStmt(ctx);
    }

    @Override
    public Object visitExistsTableStmt(ClickHouseParser.ExistsTableStmtContext ctx) {
        return super.visitExistsTableStmt(ctx);
    }

    @Override
    public Object visitExplainASTStmt(ClickHouseParser.ExplainASTStmtContext ctx) {
        return super.visitExplainASTStmt(ctx);
    }

    @Override
    public Object visitExplainSyntaxStmt(ClickHouseParser.ExplainSyntaxStmtContext ctx) {
        return super.visitExplainSyntaxStmt(ctx);
    }

    @Override
    public Object visitInsertStmt(ClickHouseParser.InsertStmtContext ctx) {
        return super.visitInsertStmt(ctx);
    }

    @Override
    public Object visitColumnsClause(ClickHouseParser.ColumnsClauseContext ctx) {
        return super.visitColumnsClause(ctx);
    }

    @Override
    public Object visitDataClauseFormat(ClickHouseParser.DataClauseFormatContext ctx) {
        return super.visitDataClauseFormat(ctx);
    }

    @Override
    public Object visitDataClauseValues(ClickHouseParser.DataClauseValuesContext ctx) {
        return super.visitDataClauseValues(ctx);
    }

    @Override
    public Object visitDataClauseSelect(ClickHouseParser.DataClauseSelectContext ctx) {
        return super.visitDataClauseSelect(ctx);
    }

    @Override
    public Object visitAssignmentValues(ClickHouseParser.AssignmentValuesContext ctx) {
        return super.visitAssignmentValues(ctx);
    }

    @Override
    public Object visitAssignmentValue(ClickHouseParser.AssignmentValueContext ctx) {
        return super.visitAssignmentValue(ctx);
    }

    @Override
    public Object visitKillMutationStmt(ClickHouseParser.KillMutationStmtContext ctx) {
        return super.visitKillMutationStmt(ctx);
    }

    @Override
    public Object visitOptimizeStmt(ClickHouseParser.OptimizeStmtContext ctx) {
        return super.visitOptimizeStmt(ctx);
    }

    @Override
    public Object visitRenameStmt(ClickHouseParser.RenameStmtContext ctx) {
        return super.visitRenameStmt(ctx);
    }

    @Override
    public Object visitProjectionSelectStmt(ClickHouseParser.ProjectionSelectStmtContext ctx) {
        return super.visitProjectionSelectStmt(ctx);
    }

    @Override
    public Object visitSelectUnionStmt(ClickHouseParser.SelectUnionStmtContext ctx) {
        return super.visitSelectUnionStmt(ctx);
    }

    @Override
    public Object visitSelectStmtWithParens(ClickHouseParser.SelectStmtWithParensContext ctx) {
        return super.visitSelectStmtWithParens(ctx);
    }

    @Override
    public Object visitSelectStmt(ClickHouseParser.SelectStmtContext ctx) {
        return super.visitSelectStmt(ctx);
    }

    @Override
    public Object visitWithClause(ClickHouseParser.WithClauseContext ctx) {
        return super.visitWithClause(ctx);
    }

    @Override
    public Object visitTopClause(ClickHouseParser.TopClauseContext ctx) {
        return super.visitTopClause(ctx);
    }

    @Override
    public Object visitFromClause(ClickHouseParser.FromClauseContext ctx) {
        return super.visitFromClause(ctx);
    }

    @Override
    public Object visitArrayJoinClause(ClickHouseParser.ArrayJoinClauseContext ctx) {
        return super.visitArrayJoinClause(ctx);
    }

    @Override
    public Object visitWindowClause(ClickHouseParser.WindowClauseContext ctx) {
        return super.visitWindowClause(ctx);
    }

    @Override
    public Object visitPrewhereClause(ClickHouseParser.PrewhereClauseContext ctx) {
        return super.visitPrewhereClause(ctx);
    }

    @Override
    public Object visitWhereClause(ClickHouseParser.WhereClauseContext ctx) {
        return super.visitWhereClause(ctx);
    }

    @Override
    public Object visitGroupByClause(ClickHouseParser.GroupByClauseContext ctx) {
        return super.visitGroupByClause(ctx);
    }

    @Override
    public Object visitHavingClause(ClickHouseParser.HavingClauseContext ctx) {
        return super.visitHavingClause(ctx);
    }

    @Override
    public Object visitOrderByClause(ClickHouseParser.OrderByClauseContext ctx) {
        return super.visitOrderByClause(ctx);
    }

    @Override
    public Object visitProjectionOrderByClause(ClickHouseParser.ProjectionOrderByClauseContext ctx) {
        return super.visitProjectionOrderByClause(ctx);
    }

    @Override
    public Object visitLimitByClause(ClickHouseParser.LimitByClauseContext ctx) {
        return super.visitLimitByClause(ctx);
    }

    @Override
    public Object visitLimitClause(ClickHouseParser.LimitClauseContext ctx) {
        return super.visitLimitClause(ctx);
    }

    @Override
    public Object visitSettingsClause(ClickHouseParser.SettingsClauseContext ctx) {
        return super.visitSettingsClause(ctx);
    }

    @Override
    public Object visitJoinExprOp(ClickHouseParser.JoinExprOpContext ctx) {
        return super.visitJoinExprOp(ctx);
    }

    @Override
    public Object visitJoinExprTable(ClickHouseParser.JoinExprTableContext ctx) {
        return super.visitJoinExprTable(ctx);
    }

    @Override
    public Object visitJoinExprParens(ClickHouseParser.JoinExprParensContext ctx) {
        return super.visitJoinExprParens(ctx);
    }

    @Override
    public Object visitJoinExprCrossOp(ClickHouseParser.JoinExprCrossOpContext ctx) {
        return super.visitJoinExprCrossOp(ctx);
    }

    @Override
    public Object visitJoinOpInner(ClickHouseParser.JoinOpInnerContext ctx) {
        return super.visitJoinOpInner(ctx);
    }

    @Override
    public Object visitJoinOpLeftRight(ClickHouseParser.JoinOpLeftRightContext ctx) {
        return super.visitJoinOpLeftRight(ctx);
    }

    @Override
    public Object visitJoinOpFull(ClickHouseParser.JoinOpFullContext ctx) {
        return super.visitJoinOpFull(ctx);
    }

    @Override
    public Object visitJoinOpCross(ClickHouseParser.JoinOpCrossContext ctx) {
        return super.visitJoinOpCross(ctx);
    }

    @Override
    public Object visitJoinConstraintClause(ClickHouseParser.JoinConstraintClauseContext ctx) {
        return super.visitJoinConstraintClause(ctx);
    }

    @Override
    public Object visitSampleClause(ClickHouseParser.SampleClauseContext ctx) {
        return super.visitSampleClause(ctx);
    }

    @Override
    public Object visitLimitExpr(ClickHouseParser.LimitExprContext ctx) {
        return super.visitLimitExpr(ctx);
    }

    @Override
    public Object visitOrderExprList(ClickHouseParser.OrderExprListContext ctx) {
        return super.visitOrderExprList(ctx);
    }

    @Override
    public Object visitOrderExpr(ClickHouseParser.OrderExprContext ctx) {
        return super.visitOrderExpr(ctx);
    }

    @Override
    public Object visitRatioExpr(ClickHouseParser.RatioExprContext ctx) {
        return super.visitRatioExpr(ctx);
    }

    @Override
    public Object visitSettingExprList(ClickHouseParser.SettingExprListContext ctx) {
        return super.visitSettingExprList(ctx);
    }

    @Override
    public Object visitSettingExpr(ClickHouseParser.SettingExprContext ctx) {
        return super.visitSettingExpr(ctx);
    }

    @Override
    public Object visitWindowExpr(ClickHouseParser.WindowExprContext ctx) {
        return super.visitWindowExpr(ctx);
    }

    @Override
    public Object visitWinPartitionByClause(ClickHouseParser.WinPartitionByClauseContext ctx) {
        return super.visitWinPartitionByClause(ctx);
    }

    @Override
    public Object visitWinOrderByClause(ClickHouseParser.WinOrderByClauseContext ctx) {
        return super.visitWinOrderByClause(ctx);
    }

    @Override
    public Object visitWinFrameClause(ClickHouseParser.WinFrameClauseContext ctx) {
        return super.visitWinFrameClause(ctx);
    }

    @Override
    public Object visitFrameStart(ClickHouseParser.FrameStartContext ctx) {
        return super.visitFrameStart(ctx);
    }

    @Override
    public Object visitFrameBetween(ClickHouseParser.FrameBetweenContext ctx) {
        return super.visitFrameBetween(ctx);
    }

    @Override
    public Object visitWinFrameBound(ClickHouseParser.WinFrameBoundContext ctx) {
        return super.visitWinFrameBound(ctx);
    }

    @Override
    public Object visitSetStmt(ClickHouseParser.SetStmtContext ctx) {
        return super.visitSetStmt(ctx);
    }

    @Override
    public Object visitShowCreateDatabaseStmt(ClickHouseParser.ShowCreateDatabaseStmtContext ctx) {
        return super.visitShowCreateDatabaseStmt(ctx);
    }

    @Override
    public Object visitShowCreateDictionaryStmt(ClickHouseParser.ShowCreateDictionaryStmtContext ctx) {
        return super.visitShowCreateDictionaryStmt(ctx);
    }

    @Override
    public Object visitShowCreateTableStmt(ClickHouseParser.ShowCreateTableStmtContext ctx) {
        return super.visitShowCreateTableStmt(ctx);
    }

    @Override
    public Object visitShowDatabasesStmt(ClickHouseParser.ShowDatabasesStmtContext ctx) {
        return super.visitShowDatabasesStmt(ctx);
    }

    @Override
    public Object visitShowDictionariesStmt(ClickHouseParser.ShowDictionariesStmtContext ctx) {
        return super.visitShowDictionariesStmt(ctx);
    }

    @Override
    public Object visitShowTablesStmt(ClickHouseParser.ShowTablesStmtContext ctx) {
        return super.visitShowTablesStmt(ctx);
    }

    @Override
    public Object visitSystemStmt(ClickHouseParser.SystemStmtContext ctx) {
        return super.visitSystemStmt(ctx);
    }

    @Override
    public Object visitTruncateStmt(ClickHouseParser.TruncateStmtContext ctx) {
        return super.visitTruncateStmt(ctx);
    }

    @Override
    public Object visitUseStmt(ClickHouseParser.UseStmtContext ctx) {
        return super.visitUseStmt(ctx);
    }

    @Override
    public Object visitWatchStmt(ClickHouseParser.WatchStmtContext ctx) {
        return super.visitWatchStmt(ctx);
    }

    @Override
    public Object visitColumnTypeExprSimple(ClickHouseParser.ColumnTypeExprSimpleContext ctx) {
        return super.visitColumnTypeExprSimple(ctx);
    }

    @Override
    public Object visitColumnTypeExprNested(ClickHouseParser.ColumnTypeExprNestedContext ctx) {
        return super.visitColumnTypeExprNested(ctx);
    }

    @Override
    public Object visitColumnTypeExprEnum(ClickHouseParser.ColumnTypeExprEnumContext ctx) {
        return super.visitColumnTypeExprEnum(ctx);
    }

    @Override
    public Object visitColumnTypeExprComplex(ClickHouseParser.ColumnTypeExprComplexContext ctx) {
        return super.visitColumnTypeExprComplex(ctx);
    }

    @Override
    public Object visitColumnTypeExprParam(ClickHouseParser.ColumnTypeExprParamContext ctx) {
        return super.visitColumnTypeExprParam(ctx);
    }

    @Override
    public Object visitColumnExprList(ClickHouseParser.ColumnExprListContext ctx) {
        return super.visitColumnExprList(ctx);
    }

    @Override
    public Object visitColumnsExprAsterisk(ClickHouseParser.ColumnsExprAsteriskContext ctx) {
        return super.visitColumnsExprAsterisk(ctx);
    }

    @Override
    public Object visitColumnsExprSubquery(ClickHouseParser.ColumnsExprSubqueryContext ctx) {
        return super.visitColumnsExprSubquery(ctx);
    }

    @Override
    public Object visitColumnsExprColumn(ClickHouseParser.ColumnsExprColumnContext ctx) {
        return super.visitColumnsExprColumn(ctx);
    }

    @Override
    public Object visitColumnExprTernaryOp(ClickHouseParser.ColumnExprTernaryOpContext ctx) {
        return super.visitColumnExprTernaryOp(ctx);
    }

    @Override
    public Object visitColumnExprAlias(ClickHouseParser.ColumnExprAliasContext ctx) {
        return super.visitColumnExprAlias(ctx);
    }

    @Override
    public Object visitColumnExprExtract(ClickHouseParser.ColumnExprExtractContext ctx) {
        return super.visitColumnExprExtract(ctx);
    }

    @Override
    public Object visitColumnExprNegate(ClickHouseParser.ColumnExprNegateContext ctx) {
        return super.visitColumnExprNegate(ctx);
    }

    @Override
    public Object visitColumnExprSubquery(ClickHouseParser.ColumnExprSubqueryContext ctx) {
        return super.visitColumnExprSubquery(ctx);
    }

    @Override
    public Object visitColumnExprLiteral(ClickHouseParser.ColumnExprLiteralContext ctx) {
        return super.visitColumnExprLiteral(ctx);
    }

    @Override
    public Object visitColumnExprArray(ClickHouseParser.ColumnExprArrayContext ctx) {
        return super.visitColumnExprArray(ctx);
    }

    @Override
    public Object visitColumnExprSubstring(ClickHouseParser.ColumnExprSubstringContext ctx) {
        return super.visitColumnExprSubstring(ctx);
    }

    @Override
    public Object visitColumnExprCast(ClickHouseParser.ColumnExprCastContext ctx) {
        return super.visitColumnExprCast(ctx);
    }

    @Override
    public Object visitColumnExprOr(ClickHouseParser.ColumnExprOrContext ctx) {
        return super.visitColumnExprOr(ctx);
    }

    @Override
    public Object visitColumnExprPrecedence1(ClickHouseParser.ColumnExprPrecedence1Context ctx) {
        return super.visitColumnExprPrecedence1(ctx);
    }

    @Override
    public Object visitColumnExprPrecedence2(ClickHouseParser.ColumnExprPrecedence2Context ctx) {
        return super.visitColumnExprPrecedence2(ctx);
    }

    @Override
    public Object visitColumnExprPrecedence3(ClickHouseParser.ColumnExprPrecedence3Context ctx) {
        return super.visitColumnExprPrecedence3(ctx);
    }

    @Override
    public Object visitColumnExprInterval(ClickHouseParser.ColumnExprIntervalContext ctx) {
        return super.visitColumnExprInterval(ctx);
    }

    @Override
    public Object visitColumnExprIsNull(ClickHouseParser.ColumnExprIsNullContext ctx) {
        return super.visitColumnExprIsNull(ctx);
    }

    @Override
    public Object visitColumnExprWinFunctionTarget(ClickHouseParser.ColumnExprWinFunctionTargetContext ctx) {
        return super.visitColumnExprWinFunctionTarget(ctx);
    }

    @Override
    public Object visitColumnExprTrim(ClickHouseParser.ColumnExprTrimContext ctx) {
        return super.visitColumnExprTrim(ctx);
    }

    @Override
    public Object visitColumnExprTuple(ClickHouseParser.ColumnExprTupleContext ctx) {
        return super.visitColumnExprTuple(ctx);
    }

    @Override
    public Object visitColumnExprArrayAccess(ClickHouseParser.ColumnExprArrayAccessContext ctx) {
        return super.visitColumnExprArrayAccess(ctx);
    }

    @Override
    public Object visitColumnExprBetween(ClickHouseParser.ColumnExprBetweenContext ctx) {
        return super.visitColumnExprBetween(ctx);
    }

    @Override
    public Object visitColumnExprParens(ClickHouseParser.ColumnExprParensContext ctx) {
        return super.visitColumnExprParens(ctx);
    }

    @Override
    public Object visitColumnExprTimestamp(ClickHouseParser.ColumnExprTimestampContext ctx) {
        return super.visitColumnExprTimestamp(ctx);
    }

    @Override
    public Object visitColumnExprAnd(ClickHouseParser.ColumnExprAndContext ctx) {
        return super.visitColumnExprAnd(ctx);
    }

    @Override
    public Object visitColumnExprTupleAccess(ClickHouseParser.ColumnExprTupleAccessContext ctx) {
        return super.visitColumnExprTupleAccess(ctx);
    }

    @Override
    public Object visitColumnExprCase(ClickHouseParser.ColumnExprCaseContext ctx) {
        return super.visitColumnExprCase(ctx);
    }

    @Override
    public Object visitColumnExprDate(ClickHouseParser.ColumnExprDateContext ctx) {
        return super.visitColumnExprDate(ctx);
    }

    @Override
    public Object visitColumnExprNot(ClickHouseParser.ColumnExprNotContext ctx) {
        return super.visitColumnExprNot(ctx);
    }

    @Override
    public Object visitColumnExprWinFunction(ClickHouseParser.ColumnExprWinFunctionContext ctx) {
        return super.visitColumnExprWinFunction(ctx);
    }

    @Override
    public Object visitColumnExprIdentifier(ClickHouseParser.ColumnExprIdentifierContext ctx) {
        return super.visitColumnExprIdentifier(ctx);
    }

    @Override
    public Object visitColumnExprFunction(ClickHouseParser.ColumnExprFunctionContext ctx) {
        return super.visitColumnExprFunction(ctx);
    }

    @Override
    public Object visitColumnExprAsterisk(ClickHouseParser.ColumnExprAsteriskContext ctx) {
        return super.visitColumnExprAsterisk(ctx);
    }

    @Override
    public Object visitColumnArgList(ClickHouseParser.ColumnArgListContext ctx) {
        return super.visitColumnArgList(ctx);
    }

    @Override
    public Object visitColumnArgExpr(ClickHouseParser.ColumnArgExprContext ctx) {
        return super.visitColumnArgExpr(ctx);
    }

    @Override
    public Object visitColumnLambdaExpr(ClickHouseParser.ColumnLambdaExprContext ctx) {
        return super.visitColumnLambdaExpr(ctx);
    }

    @Override
    public Object visitColumnIdentifier(ClickHouseParser.ColumnIdentifierContext ctx) {
        return super.visitColumnIdentifier(ctx);
    }

    @Override
    public Object visitNestedIdentifier(ClickHouseParser.NestedIdentifierContext ctx) {
        return super.visitNestedIdentifier(ctx);
    }

    @Override
    public Object visitTableExprIdentifier(ClickHouseParser.TableExprIdentifierContext ctx) {
        return super.visitTableExprIdentifier(ctx);
    }

    @Override
    public Object visitTableExprSubquery(ClickHouseParser.TableExprSubqueryContext ctx) {
        return super.visitTableExprSubquery(ctx);
    }

    @Override
    public Object visitTableExprAlias(ClickHouseParser.TableExprAliasContext ctx) {
        return super.visitTableExprAlias(ctx);
    }

    @Override
    public Object visitTableExprFunction(ClickHouseParser.TableExprFunctionContext ctx) {
        return super.visitTableExprFunction(ctx);
    }

    @Override
    public Object visitTableFunctionExpr(ClickHouseParser.TableFunctionExprContext ctx) {
        return super.visitTableFunctionExpr(ctx);
    }

    @Override
    public Object visitTableIdentifier(ClickHouseParser.TableIdentifierContext ctx) {
        return super.visitTableIdentifier(ctx);
    }

    @Override
    public Object visitTableArgList(ClickHouseParser.TableArgListContext ctx) {
        return super.visitTableArgList(ctx);
    }

    @Override
    public Object visitTableArgExpr(ClickHouseParser.TableArgExprContext ctx) {
        return super.visitTableArgExpr(ctx);
    }

    @Override
    public Object visitDatabaseIdentifier(ClickHouseParser.DatabaseIdentifierContext ctx) {
        return super.visitDatabaseIdentifier(ctx);
    }

    @Override
    public Object visitFloatingLiteral(ClickHouseParser.FloatingLiteralContext ctx) {
        return super.visitFloatingLiteral(ctx);
    }

    @Override
    public Object visitNumberLiteral(ClickHouseParser.NumberLiteralContext ctx) {
        return super.visitNumberLiteral(ctx);
    }

    @Override
    public Object visitLiteral(ClickHouseParser.LiteralContext ctx) {
        return super.visitLiteral(ctx);
    }

    @Override
    public Object visitInterval(ClickHouseParser.IntervalContext ctx) {
        return super.visitInterval(ctx);
    }

    @Override
    public Object visitKeyword(ClickHouseParser.KeywordContext ctx) {
        return super.visitKeyword(ctx);
    }

    @Override
    public Object visitKeywordForAlias(ClickHouseParser.KeywordForAliasContext ctx) {
        return super.visitKeywordForAlias(ctx);
    }

    @Override
    public Object visitAlias(ClickHouseParser.AliasContext ctx) {
        return super.visitAlias(ctx);
    }

    @Override
    public Object visitIdentifier(ClickHouseParser.IdentifierContext ctx) {
        return super.visitIdentifier(ctx);
    }

    @Override
    public Object visitIdentifierOrNull(ClickHouseParser.IdentifierOrNullContext ctx) {
        return super.visitIdentifierOrNull(ctx);
    }

    @Override
    public Object visitEnumValue(ClickHouseParser.EnumValueContext ctx) {
        return super.visitEnumValue(ctx);
    }
}
